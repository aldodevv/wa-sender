

   const numbers = ['083870126241','081213369497','085156597246','0895380057458','081281084924','08817266323','5947659233','085891091997','081456081822','081211994540','089637575727','083817383314','8889516611','085157550375','089637859557','082211367258','089501103748','081297472004','0895331727658','085798714220','085880345696','0895346159258','0895320905607','087877285961','085892644370','089670340710','088213304710','089678865427','085864607074','085892219790','089517799841','085714155944','085216960678','085770474071','087716151023','089630197204','085715862860','085161524088','085759998634','081399261544','088293022887','8993509112','085719714075','+6281513933708','081339301487','088210114163','081212930827','089630401224','081233363052','081219699557','081290784807','081213369119','089669509655','089523210804','085225518729','081905466899','085821266613','08569564955','088219707062','089694490182','089675757122','083824353868','087879525819','081317037781','081280274965','085782265046','082124677696','081239917676','082217203786','085893476228','085697197782','0895391751804','08999302593','089662717400','0895330392394','081291650531','089646549755','085155155948','082370777654','081236895551','083896297994','081511942887','089524736702','081310671422','085796759078','5248303608','081287290263','0895414728139','082310573700','089525437326','085717605552','088297739502','085283397068','085314945559','089616827400','082123586726','085591452070','088212011429','0895379788123','0895332373962','085723641840','085859029917','089505234000','083893964322','081383661920','082289337307','089526219044','085781160479','0895701615142','085814015613','081338445301','085697767180','087771678934','08888613074','0218009471','081818813544','081996609868','085865369826','081219938953','085773332597','085946708950','081289756067','081291468721','085695347622','087820553216','083132886118','085159743005','085772524236','085694112924','088213064656','0895332196341','088809995994','0895704075589','082353028349','0895383252913','085601054568','081523815966','081297831578','082255241008','081291489312','0895412945216','085714467390','0895602578229','089514461882','085246178631','087888837014','085894653608','087872757990','085822753747','081316367899','0895365304221','081350919458','085811005429','081944333704','0895320542801','081286203345','088290567643','081345193449','087773733304','082337712130','085710271239','089501026457','085947324273','083873699936','085951348327','0859106813320','081294411271','089513591681','087772543410','081283193378','087779226377','085711682457','081295889227','081915151444','082112026087','085157389958','083159994144','087830951257','087826832724','081281173504','081292803198','085776253491','081352210877','083874003229','087888460537','085693458722','082320285842','085174161905','082197775512','082123299496','0895413755930','087741415925','081395982939','085161417500','085890087768','089648492198','088216372746','089664477552','082298953040','089653836343','085158577996','085172014604','089680480600','089630742076','081218655864','08878848908','081388017827','082123405721','089602492934','081285114186','081389158700','085748526904','08976218010','088289123059','082288221495','0895391556999','082159700767','085334991336','087892008908','085161162409','081385084867','08158784885','082174443344','081906521084','089509006070','085157445909','085161406944','083899601027','088225825512','081219564156','0895606168771','082256168574','0895323655577','082258779965','085694463474','087806781225','087888222357','081311468677','0881024970597','0895383356776','089502803480','087787186517','082152155049','0895615778552','085715730673','089654505884','088291876843','085711186725','082286066877','081258618494','081311081788','081219012384','085283889682','081347826511','081241184300','082311645497','089670252254','0895321080033','085894656178','082237941654','8885673339','085892076528','085710368066','082211481135','085160116699','081210649506','082299718064','082288661773','081328361270','085711168827','083804221142','089694270997','085929961793','085732171531','085787007609','085779778504','085780126338','089516887089','089605694455','085849353608','0881024027021','088213849571','087874759746','083135472995','089699284430','081297869357','085718357329','082279483301','0895334999599','082289249057','081296200479','081818241116','081397073074','085753957873','0895393039822','085158116032','085711051844','085960313077','087787929683','082124389541','089504688803','081398917086','087793246984','089516788169','081258541038','085880431359','081294758524','0895327414574','088298117769','089665557893','089637368720','089514483581','085694513877','089529770020','085946650292','081294889782','088299213858','0895398178050','089653787316','085892728792','81212986036','085609143321','0895704412581','081277373824','085770757274','081386548871','08588857429','085771911187','08815373571','082116629906','081808900981','08561674220','081218674792','085891465057','081290311866','081223791824','089602675939','0895631595544','08118649333','085752704917','089526272752','085861354362','08119692385','089526497806','088708873023','085849947863','085226237613','081368762766','085776765720','081324652707','081806268198','081290434017','081348686348','1280703986','08998685963','083899084253','081281442529','085156989046','085156101870','082125785129','089654942801','082351335166','088213415316','08551746838','082266949599','081213572183','087771237195','083112353485','087897630371','081290246300','089513732930','082249577960','085697098553','081215313723','089507377718','089694769701','089694471589','082147238119','087829038050','81383352218','085156376617','0882022144396','087870856013','085822417068','085163102212','089525574496','081254610399','081521558514','085348110170','082159033439','085771600194','0895600787013','085693188349','085787173903','081350495253','082359133348','0895612317217','08159127845','081510051169','085875583007','085697126388','085781100781','087788162721','085753961855','085877559947','089503309223','0895331398730','082374079647','082350991027','088975932053','085157413055','081255342439','088296547791','083874487834','085891633199','087788166027','081528828771','081287631632','081210812631','081385312060','081212744501','081517980607','6282253933810','089504345184','087885744809','085891730034','085695608171','087887398625','085716461214','089653018627','082310463208','081245000241','081283238547','085657289927','082124620848','082374079647','082122085604','0856535774','087756482540','082159762688','081649425221','087860172267','088975347069','081384581458','081219978860','081905074939','082173982350','085668784917','081298229050','085787103177','081382140068','082122861575','087874153770','08158731813','081807814067','0895606084724','0895706530901','0895707910603','081210773997','081382431905','085752734384','087810973031','085771696022','083807412019','085828245226','082125471085','087774114849','085246626042','081381725653','082199940160','085778305605','085717595581','089506721545','081257029162','081284181175','08972777549','083892727264','081349105199','087834667181','0895322848991','0895704121560','089643429760','089677227109','088233409829','085654005579','087721910694','085161430566','085718855437','085894162533','085776303791','085828636615','085775648202','081993249054','0852320358682'];
    
   const { default: makeWASocket, DisconnectReason, useMultiFileAuthState } = require('@whiskeysockets/baileys');
const { Boom } = require('@hapi/boom');
const QRCode = require('qrcode-terminal');
const pino = require('pino');

class WABulkSender {
    constructor() {
        this.sock = null;
        this.isReady = false;
        this.logger = pino({ level: 'silent' });
        this.qrRetries = 0;
        this.maxQRRetries = 3;
    }

    async initialize() {
        try {
            const { state, saveCreds } = await useMultiFileAuthState('auth_info');
            
            this.sock = makeWASocket({
                auth: state,
                logger: this.logger,
                printQRInTerminal: false,
                browser: ['Ubuntu', 'Chrome', '20.0.04'],
                connectTimeoutMs: 60000,
                defaultQueryTimeoutMs: 0,
                keepAliveIntervalMs: 10000,
                emitOwnEvents: true,
                fireInitQueries: true,
                generateHighQualityLinkPreview: true,
                syncFullHistory: false,
                markOnlineOnConnect: true,
            });

            this.sock.ev.on('connection.update', (update) => {
                const { connection, lastDisconnect, qr } = update;
                
                if (qr) {
                    console.log('üì± Scan QR Code:');
                    QRCode.generate(qr, { small: true });
                    this.qrRetries++;
                    
                    if (this.qrRetries > this.maxQRRetries) {
                        console.log('‚ùå Too many QR retries. Restarting...');
                        this.restart();
                        return;
                    }
                }
                
                if (connection === 'close') {
                    const shouldReconnect = (lastDisconnect?.error instanceof Boom) 
                        ? lastDisconnect.error.output.statusCode !== DisconnectReason.loggedOut
                        : true;
                    
                    console.log('‚ùå Connection closed due to:', lastDisconnect?.error);
                    
                    if (shouldReconnect) {
                        console.log('üîÑ Reconnecting...');
                        this.initialize();
                    }
                    
                    this.isReady = false;
                } else if (connection === 'open') {
                    console.log('‚úÖ WhatsApp Connected Successfully!');
                    this.isReady = true;
                    this.qrRetries = 0;
                }
            });

            this.sock.ev.on('creds.update', saveCreds);
            
        } catch (error) {
            console.error('‚ùå Initialization error:', error);
            setTimeout(() => this.initialize(), 5000);
        }
    }

    async restart() {
        if (this.sock) {
            this.sock.end();
        }
        this.qrRetries = 0;
        await this.delay(2000);
        this.initialize();
    }

    async waitForReady() {
        let attempts = 0;
        const maxAttempts = 60;
        
        while (!this.isReady && attempts < maxAttempts) {
            await this.delay(1000);
            attempts++;
        }
        
        if (!this.isReady) {
            throw new Error('Failed to connect after 60 seconds');
        }
    }

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    formatNumber(number) {
        let cleaned = number.replace(/\D/g, '');
        
        if (cleaned.startsWith('8')) {
            cleaned = '62' + cleaned;
        } else if (cleaned.startsWith('08')) {
            cleaned = '62' + cleaned.substring(1);
        }
        
        return cleaned + '@s.whatsapp.net';
    }

    async sendMessage(number, message) {
        try {
            const formattedNumber = this.formatNumber(number);
            
            // Check if number exists on WhatsApp
            const [exists] = await this.sock.onWhatsApp(formattedNumber);
            if (!exists?.exists) {
                console.log(`‚ùå ${number} - Not registered on WhatsApp`);
                return false;
            }

            await this.sock.sendMessage(formattedNumber, { text: message });
            console.log(`‚úÖ ${number} - Message sent successfully`);
            return true;
            
        } catch (error) {
            console.error(`‚ùå ${number} - Error:`, error.message);
            return false;
        }
    }

    async bulkSend(numbers, message, delaySeconds = 40) {
        await this.waitForReady();
        
        console.log(`\nüöÄ Starting bulk send to ${numbers.length} numbers...`);
        console.log(`‚è∞ Delay: ${delaySeconds}s between messages\n`);
        
        const results = {
            total: numbers.length,
            success: 0,
            failed: 0,
            errors: []
        };

        for (let i = 0; i < numbers.length; i++) {
            const number = numbers[i];
            console.log(`üì± [${i + 1}/${numbers.length}] Sending to ${number}...`);
            
            const success = await this.sendMessage(number, message);
            
            if (success) {
                results.success++;
            } else {
                results.failed++;
                results.errors.push(number);
            }
            
            // Delay except for last message
            if (i < numbers.length - 1) {
                console.log(`‚è≥ Waiting ${delaySeconds}s before next message...\n`);
                await this.delay(delaySeconds * 1000);
            }
        }

        console.log('\nüìä BULK SEND COMPLETED');
        console.log(`‚úÖ Success: ${results.success}`);
        console.log(`‚ùå Failed: ${results.failed}`);
        if (results.errors.length > 0) {
            console.log(`Failed numbers: ${results.errors.join(', ')}`);
        }
        
        return results;
    }

    async destroy() {
        if (this.sock) {
            this.sock.end();
        }
    }
}

// Usage Example
async function main() {
    const sender = new WABulkSender();
    
    const message = 'bang/ka mau joki skripsi, laporan, project web/app';
    
    try {
        console.log('üîÑ Initializing WhatsApp connection...');
        await sender.initialize();
        
        // Send with 40s delay (change to 60 for 1 minute)
        const results = await sender.bulkSend(numbers, message, 40);
        
        console.log('\nüí° Process completed. Press Ctrl+C to exit');
        
    } catch (error) {
        console.error('‚ùå Error:', error.message);
    }
}

// Run the script
main().catch(console.error);

// Graceful shutdown
process.on('SIGINT', async () => {
    console.log('\nüõë Shutting down...');
    process.exit(0);
});

module.exports = WABulkSender;